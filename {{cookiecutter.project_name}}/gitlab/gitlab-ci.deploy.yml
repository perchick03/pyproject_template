# Deploy build package into staging environment
# TODO: Use tox and tox-wheel to test the package, currently just installing and running tests on it
# This job is triggered on every push or if deploy_package && build_package are set to ON
deploy_package:
  stage: deploy
  environment: staging
  rules:
    # git push -o ci.variable="deploy_package=ON" -o ci.variable="build_package=ON"
    - if: $deploy_package=="ON" && $build_package=="ON"
    - if: $CUSTOM_PIPELINE=="ON"
      when: never
    - when: on_success
  needs: ["build_package"]
  before_script:
    # Overriding global before_script
    - pip3 install virtualenv
    - virtualenv venv_python
    - source venv_python/bin/activate
    # Install the latest wheel build during build_pkg job
    - pip3 install $(ls dist/*.whl | xargs -n1)
    # prep for testing
    - mkdir -p /tmp/$CI_COMMIT_SHORT_SHA
    - cp -r tests /tmp/$CI_COMMIT_SHORT_SHA
    - pip3 install pytest
  script:
    # Sanity check
    - {{cookiecutter.project_name}}_cli --version
    - cd /tmp/$CI_COMMIT_SHORT_SHA
    # TODO: split to deploy test using @pytest.mark.deploy|e2e to run deploy tests, currently will run all tests again
    - pytest -svv ./tests

# Deploy documentation to gitlab pages
# This job runs when a new version tag is pushed (e.g., v1.2.3) or when deploy_docs is set to ON
pages:
  stage: deploy
  tags:
    - linux
  rules:
    # git push -o ci.variable="deploy_docs=ON"
    - if: $pages=="ON"
    - if: $CUSTOM_PIPELINE=="ON"
      when: never
    # git tag v1.2.3 && git push origin v1.2.3
    - if: $CI_COMMIT_TAG =~ /^v\d+\.\d+(\.\d+)?(-\S*)?$/
  script:
    # generate docs from docstrings
    - sphinx-apidoc -o docs/source src
    - python3 -m sphinx.cmd.build -b html docs/source docs/build/
    - mv docs/build public
    - echo "========================"
    - echo "Documentation is available in https://${GITLAB_USER_LOGIN}.gitlab.io/${CI_PROJECT_NAME}/"
    - echo "========================"
  artifacts:
    paths:
    - public
